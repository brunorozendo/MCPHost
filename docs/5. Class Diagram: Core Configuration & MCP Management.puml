@startuml ConfigMcpClassDiagram


class Main {
  - mcpToolClientManager: McpToolClientManager
  - mcpConfigFile: File
  + call(): Integer
}

class McpConfigLoader {
  - objectMapper: ObjectMapper
  + load(File): McpConfig
}

class McpConfig <<POJO>> {
  - mcpServers: Map<String, McpServerEntry>
}

class McpServerEntry <<POJO>> {
  - command: String
  - args: List<String>
  - env: Map<String, String>
}

class McpToolClientManager {
  - clients: Map<String, McpAsyncClient>
  - toolToServerMapping: Map<String, String>
  + initializeClients(McpConfig)
  + getAllTools(): List<McpSchema.Tool>
  + callTool(String, Map): McpSchema.CallToolResult
  + closeAllClients()
}

package "io.modelcontextprotocol.client" {
  class McpAsyncClient {
    + initialize(): Mono<InitializeResult>
    + listTools(): Mono<ListToolsResult>
    + callTool(CallToolRequest): Mono<CallToolResult>
    + closeGracefully(): Mono<Void>
  }
  class McpClient {
    + {static} async(McpClientTransport): AsyncSpec
  }
}

package "io.modelcontextprotocol.client.transport" {
  class StdioClientTransport {
    + StdioClientTransport(ServerParameters)
  }
  class ServerParameters {
    + {static} builder(String): Builder
  }
}

package "io.modelcontextprotocol.spec" {
  class McpSchema.Tool <<Data>> {}
  class McpSchema.CallToolResult <<Data>> {}
}


Main --> McpConfigLoader
Main --> McpToolClientManager
McpConfigLoader ..> McpConfig : creates
McpConfig *-- "1" McpServerEntry : contains (mcpServers map)

McpToolClientManager o-- "*" McpAsyncClient : manages
McpToolClientManager ..> McpConfig : uses
McpToolClientManager ..> McpSchema.Tool : uses
McpToolClientManager ..> McpSchema.CallToolResult : uses

McpAsyncClient ..> StdioClientTransport : uses (internally via McpClient factory)
StdioClientTransport ..> ServerParameters : uses

@enduml